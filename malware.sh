#!/bin/sh

# WARNING: В҈с҉е̴ ч̸т̶о҉ п҈о̶й̵д̷е҈т̵ н҉е҉ т̴а҈к̷ -҈ п̴о̴й̶д̷е̶т̷ н̶е̴ т̴а҉к҈
# На ваш страх и риск запускать :)

# # WIFI
# ip addr show -> interface name (wlan0)
# iwctl
#     station INT_NAME get-networks
# iwctl --passphrase "PASSWORD" station INT_NAME connect WIFI_NAME

# FS
# cfdisk
#     boot - 500M
#     swap - 8G
#     root - rest of disk
#
# mkfs.ext4 /dev/sda3         - root
# mkfs.fat -F 32 /dev/sda1    - boot
# mkswap /dev/sda2            - swap
#
# mount /dev/sda3 /mnt
# mkdir -p /mnt/boot/efi
# mount /dev/sda1 /mnt/boot/efi
# swapon /dev/sda2
#
# pacstrap -K /mnt base base-devel linux linux-firmware sof-firmware linux-headers neovim \
#   git grub dosfstools efibootmgr os-prober mtools ntfs-3g networkmanager rustup zsh
#
# # WINDOWS DRIVE
# lsblk
# mkdir -p /mnt/media/windows1
# mount -t ntfs-3g /dev/sdb1 /mnt/media/windows1 - windows partition
#
# # FSTAB
# genfstab -U /mnt >> /mnt/etc/fstab

# arch-chroot /mnt

# NOTE: Склонировать dotfiles в домашнюю директроию /root
# https://github.com/Krasin1/dotfiles

USER_NAME="xxx"

set -euo pipefail
trap 'echo "[ERROR] Произошла ошибка в строке $LINENO" | tee -a "$LOGFILE"' ERR

LOGFILE="/tmp/my_install.log"
exec > >(tee -a "$LOGFILE") 2>&1

GREEN='\033[0;32m'
NC='\033[0m' # No Color
green_echo() { echo -e "${GREEN}$1${NC}"; }

rm -rf /tmp/my_install_*

while true; do
    green_echo " -- Did you partition your drive? [Yes/No] : "
    read -p "Answer: " yn
    case $yn in
        [Yy]* ) echo "Okey"; break;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;
    esac
done

# GPU info
while true; do
    green_echo " -- GPU?  1:NVIDIA  2:AMD  3:None  [1/2/3]"
    read -p "Answer: " yn
    case $yn in
        [1]* ) 
            echo "NVIDIA" > /tmp/my_install_gpu_info;
            chmod 644 /tmp/my_install_gpu_info;
            break;;
        [2]* ) 
            echo "AMD" > /tmp/my_install_gpu_info;
            chmod 644 /tmp/my_install_gpu_info;
            break;;
        [3]* ) break;;
        * ) echo "Please answer 1,2 or 3";;
    esac
done

# CPU info 
while true; do
    green_echo " -- CPU?  1:Intel  2:AMD  3:None  [1/2/3] :  " 
    read -p "Answer: " yn
    case $yn in
        [1]* )
            echo "Intel" > /tmp/my_install_cpu_info;
            chmod 644 /tmp/my_install_cpu_info;
            break;;
        [2]*)
            echo "AMD" > /tmp/my_install_cpu_info;
            chmod 644 /tmp/my_install_cpu_info;
            break;;
        [3]* ) break;;
        * ) echo "Please answer 1,2 or 3";;
    esac
done

# laptop ?
while true; do 
    green_echo " -- Install laptop features? [Yes/No]"
    green_echo "(huawei battery threshold, gestures, hibernation, wifi-suspend-fix)"
    read -p "Answer: " yn
    case $yn in
        [Yy]* ) 
            echo "On" > /tmp/my_install_laptop;
            chmod 644 /tmp/my_install_laptop;
            break;;
        [Nn]* ) break;;
        * ) echo "Please answer yes or no.";;
    esac
done

# ddcci nvidia fix 
while true; do
    green_echo " -- Install ddcci driver fix? [Yes/No]"
    read -p "Answer: " yn
    case $yn in
        [Yy]* )
            echo "On" > /tmp/my_install_ddcci;
            chmod 644 /tmp/my_install_ddcci;
            break;;
        [Nn]* ) break;;
        * ) echo "Please answer yes or no.";;
    esac
done


# SETUP
ln -s /usr/share/zoneinfo/Europe/Moscow /etc/localtime
hwclock --systohc

timedatectl set-local-rtc 1 --adjust-system-clock

# Разкомментировать все строки, начинающиеся с ru_RU или en_US
sed -i "s/^#\(ru_RU\|en_US\)/\1/" /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

echo "arch" > /etc/hostname
green_echo " -- Root password" # | passwd
passwd 

green_echo "Creating user $USER_NAME"
useradd -m -G wheel -s /bin/zsh $USER_NAME
passwd $USER_NAME
usermod -aG power,video,storage,optical,input,audio $USER_NAME

green_echo " -- Changing visudo"
echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" | tee -a /etc/sudoers >/dev/null
visudo -c

systemctl enable NetworkManager

sed -i "/GRUB_DISABLE_OS_PROBER/d" /etc/default/grub
echo "GRUB_DISABLE_OS_PROBER=false" | tee -a /etc/default/grub
grub-install --target=x86_64-efi --bootloader-id=GRUB --recheck
grub-mkconfig -o /boot/grub/grub.cfg

green_echo " -- pacman.conf"
sed -i "s/^#Color$/Color/" /etc/pacman.conf
# Добавить ILoveCandy после Color
sed -i "/^Color$/a ILoveCandy" /etc/pacman.conf
# Раскомментировать VerbosePkgLists
sed -i "s/^#VerbosePkgLists$/VerbosePkgLists/" /etc/pacman.conf
# Раскомментировать блок [multilib]
sed -i "/^#\[multilib\]$/,+1 s/^#//" /etc/pacman.conf

pacman -Syyuu reflector rsync --noconfirm
reflector -c "Russia," -a 6 --sort rate --save /etc/pacman.d/mirrorlist

green_echo "Switching to user"
su - $USER_NAME << EOF
    green_echo() { echo -e "${GREEN}\$1${NC}"; }

    green_echo " -- Installing rustup"
    rustup install nightly stable
    rustup default stable

    green_echo " -- Installing paru"
    git clone https://aur.archlinux.org/paru.git
    cd paru
    makepkg -si --noconfirm

    cd ~/
    green_echo " -- Installing dotfiles"
    git clone https://github.com/Krasin1/dotfiles
    cd dotfiles
    paru -S lsd stow --noconfirm
    stow zsh nvim kitty clangd clang-format config_cfgs \
        dunst eww git rofi wallpapers yazi zathura mpv hypr
EOF

if [ -e /tmp/my_install_cpu_info ]; then
    if [ $(cat /tmp/my_install_cpu_info) == "AMD" ]; then
        green_echo " -- Installing AMD cpu drivers"
        paru -S amd-ucode xf86-video-amdgpu \
            vulkan-radeon lib32-vulkan-radeon --noconfirm
    elif [ $(cat /tmp/my_install_cpu_info) == "Intel" ]; then
        green_echo " -- Installing INTEL cpu drivers"
        paru -S intel-ucode vulkan-intel lib32-vulkan-intel \
            xf86-video-intel intel-media-driver --noconfirm
    fi
fi

if [ -e /tmp/my_install_gpu_info ]; then
    if [ $(cat /tmp/my_install_gpu_info) == "AMD" ]; then
        green_echo " -- Installing AMD gpu drivers"
        paru -S xf86-video-amdgpu vulkan-radeon lib32-vulkan-radeon --noconfirm
    elif [ $(cat /tmp/my_install_gpu_info) == "NVIDIA" ]; then
        green_echo " -- Installing NVIDIA gpu drivers"
        paru -S nvidia nvidia-settings nvidia-utils lib32-nvidia-utils --noconfirm
        su - $USER_NAME << EOF
            paru -S gwe --noconfirm
EOF
    fi
fi

su - $USER_NAME << EOF
    green_echo " -- Installing packages"
    paru -S \
        brillo \
        bluez bluez-utils blueman \
        network-manager-applet \
        clang gdb npm \
        libreoffice-still libreoffice-still-ru nwg-look \
        ttf-cascadia-code otf-font-awesome ttf-material-design-icons-desktop-git \
        ttf-jetbrains-mono-nerd ttf-joypixels ttf-terminus-nerd ttf-inconsolata\
        noto-fonts-cjk \
        papirus-icon-theme qogir-gtk-theme qogir-icon-theme \
        pipewire pipewire-alsa pipewire-jack pipewire-pulse \
        alsa-utils wireplumber qpwgraph pavucontrol \
        mpd mpd-mpris mpc ncmpcpp \
        mpv mpv-mpris \
        eww-git playerctl sysstat \
        dunst rofi udiskie fbreader \
        hyprland swaybg grimblast-git swappy \
        xdg-utils xdg-desktop-portal xdg-desktop-portal-gtk \
        cliphist wl-clipboard \
        lsd lolcat btop neofetch nemo p7zip engrampa kitty less \
        yazi ffmpeg 7zip jq poppler fd ripgrep fzf zoxide resvg imagemagick ueberzugpp \
        cloc \
        zathura zathura-pdf-poppler tree-sitter-cli\
        firefox \
        hiddify qbittorrent\
        polkit polkit-gnome \
        vesktop-bin qdirstat-bin \
        libc++ \
        --noconfirm

    cd ~/dotfiles
    green_echo " -- Installing mpd"
    stow mpd
    cd ~/.config/mpd/
    cp log_template log
    cp mpd.db_template mpd.db
    cp mpdstate_template mpdstate

    green_echo " -- Installing ncmpcpp"
    cd ~/dotfiles
    stow ncmpcpp
    cd ~/.config/ncmpcpp
    cp error.log_template error.log

    green_echo " -- Installing firefox"
    cd ~/dotfiles
    firefox --headless &;
    sleep 5;
    pkill -x firefox;
    PROFILE=\$(grep -oP "(?<=Path=).*\.default-release" ~/.mozilla/firefox/profiles.ini)
    ln -s ~/dotfiles/firefox/chrome ~/.mozilla/firefox/\$PROFILE/
    wget https://raw.githubusercontent.com/yokoffing/Betterfox/refs/heads/main/user.js -O ~/.mozilla/firefox/\$PROFILE/user.js
    echo "user_pref(\"sidebar.verticalTabs\", true);" | tee -a ~/.mozilla/firefox/\$PROFILE/user.js
    sudo ln -s ~/dotfiles/firefox/config.js /usr/lib/firefox/
    sudo ln -s ~/dotfiles/firefox/autoconfig.js /usr/lib/firefox/defaults/pref/
    sudo ln -s ~/dotfiles/firefox/policies.json /usr/lib/firefox/distribution/


    if [ -e /tmp/my_install_ddcci ]; then
        green_echo " -- Installing ddcci"
        paru -S ddcci-driver-linux-dkms-git ddcutil --noconfirm
        cd ~/dotfiles/backlight
        sudo cp blacklist.conf /etc/modprobe.d/
        sudo cp ddcci.conf /etc/modprobe.d/
        sudo cp ddcci@.service /etc/systemd/system/
        sudo cp 99-ddcci.rules /etc/udev/rules.d/
    fi

    xdg-mime default nemo.desktop inode/directory
EOF

# enable mpd service per user
USER_NAME="xxx"

MPD_SCRIPT="#!/bin/bash
systemctl --user enable --now mpd
systemctl --user enable --now mpd-mpris
sed -i '/first_login.sh/d' ~/dotfiles/zsh/.config/zsh/.zprofile
rm -- \"\$0\"
"

sudo -u $USER_NAME bash -c "echo '$MPD_SCRIPT' > /home/$USER_NAME/first_login.sh"
sudo -u $USER_NAME chmod +x "/home/$USER_NAME/first_login.sh"

PROFILE_FILE="/home/$USER_NAME/dotfiles/zsh/.config/zsh/.zprofile"
if ! sudo -u "$USER_NAME" grep -q "first_login.sh" "$PROFILE_FILE" 2>/dev/null; then
    sudo -u "$USER_NAME" sed -i '/exec Hyprland/i\  ~/first_login.sh' "$PROFILE_FILE"
fi


if [ -e /tmp/my_install_laptop ]; then 
    green_echo " -- Installing battery threshold [20 80]"
    su - $USER_NAME << EOF
        paru -S huawei-wmi --noconfirm
EOF

    usermod -aG huawei-wmi $USER_NAME
    # Закомментировать строку и добавить новую после нее
    sed -i '/cp -- "$DEF$cct" "$WMI"/s/^/# /; /cp -- "$DEF$cct" "$WMI"/a echo "20 80" > $WMI$cct' /usr/lib/huawei-wmi/reinstate
    systemctl enable huawei-wmi-reinstate.service

    green_echo " -- Installing hibernation"
    # Удалить все существующие строки HandleLidSwitch и добавить нужную
    sed -i '/HandleLidSwitch/d' /etc/systemd/logind.conf
    echo "HandleLidSwitch=hibernate" | tee -a /etc/systemd/logind.conf
    # Удалить существующий resume и добавить перед filesystems
    sed -i 's/ resume//g; s/\(HOOKS=.*\)filesystems\(.*\)/\1resume filesystems\2/' /etc/mkinitcpio.conf

    green_echo " -- Installing gestures"

    su - $USER_NAME << EOF
        paru -S libinput libinput-gestures gestures --noconfirm
EOF
    # Добавить i2c_hid в конец HOOKS, если его еще нет
    sed -i '/^HOOKS=/ { /i2c_hid/! s/\(.*)\)/\1 i2c_hid)/ }' /etc/mkinitcpio.conf

    mkinitcpio -p linux

    green_echo " -- Installing wifi susptend fix"
    cd /home/$USER_NAME/dotfiles
    stow -t /usr/lib/systemd/systemd-sleep/ wifi-suspend-fix;

    green_echo " -- Installing auto_cpufreq"
    su - $USER_NAME << EOF
        paru -S auto-cpufreq --noconfirm
EOF
    auto-cpufreq --install
fi;


systemctl enable bluetooth

cd ~/dotfiles 
stow zsh
chsh -s /bin/zsh
